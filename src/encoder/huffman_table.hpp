#ifndef INCLUDED_JPEZY_HUFFMAN_TABLE_HPP
#define INCLUDED_JPEZY_HUFFMAN_TABLE_HPP

#include "../jpezy.hpp"

namespace jpezy {

template <class T, std::size_t s>
struct huffmanCode_Tb {
    typedef T value_type;
    explicit SROOK_CONSTEXPR huffmanCode_Tb(const srook::array<T, s>& size, const srook::array<T, s>& code)
        : size_tb(size)
        , code_tb(code)
    {}
    const srook::array<T, s>& size_tb;
    const srook::array<T, s>& code_tb;

    SROOK_CONSTEXPR std::size_t size() const SROOK_NOEXCEPT_TRUE { return s; }
};
template <class T, std::size_t s>
explicit huffmanCode_Tb(const srook::array<T, s>&, const srook::array<T, s>&) -> huffmanCode_Tb<T, s>;

// ISO/IEC 10918-1:1993(E)

// Table K.3  - Table for luminance DC coefficient differences
typedef srook::array<int, 12> YCDc_type;
static SROOK_CONSTEXPR_OR_CONST YCDc_type YDcSizeT{
    0x0002, 0x0003, 0x0003, 0x0003,
    0x0003, 0x0003, 0x0004, 0x0005,
    0x0006, 0x0007, 0x0008, 0x0009
};
static SROOK_CONSTEXPR_OR_CONST YCDc_type YDcCodeT{
    0x0000, 0x0002, 0x0003, 0x0004,
    0x0005, 0x0006, 0x000e, 0x001e,
    0x003e, 0x007e, 0x00fe, 0x01fe
};
static SROOK_CONSTEXPR_OR_CONST huffmanCode_Tb YDcHuffmanT{ YDcSizeT, YDcCodeT };

// Table K.4 - Table for chrominance DC coefficient differences
static SROOK_CONSTEXPR_OR_CONST YCDc_type CDcSizeT{
    0x0002, 0x0002, 0x0002, 0x0003,
    0x0004, 0x0005, 0x0006, 0x0007,
    0x0008, 0x0009, 0x000a, 0x000b
};
static SROOK_CONSTEXPR_OR_CONST YCDc_type CDcCodeT{
    0x0000, 0x0001, 0x0002, 0x0006,
    0x000e, 0x001e, 0x003e, 0x007e,
    0x00fe, 0x01fe, 0x03fe, 0x07fe
};
static const huffmanCode_Tb CDcHuffmanT{ CDcSizeT, CDcCodeT };

// Table K.5 - Table for luminance AC coefficient(sheet 1 - 4)
typedef srook::array<int, 162> YCAc_type;
static SROOK_CONSTEXPR_OR_CONST YCAc_type YAcSizeT{
    4, 2, 2, 3, 4, 5, 7, 8,
    10, 16, 16, 4, 5, 7, 9, 11,
    16, 16, 16, 16, 16, 5, 8, 10,
    12, 16, 16, 16, 16, 16, 16, 6,
    9, 12, 16, 16, 16, 16, 16, 16,
    16, 6, 10, 16, 16, 16, 16, 16,
    16, 16, 16, 7, 11, 16, 16, 16,
    16, 16, 16, 16, 16, 7, 12, 16,
    16, 16, 16, 16, 16, 16, 16, 8,
    12, 16, 16, 16, 16, 16, 16, 16,
    16, 9, 15, 16, 16, 16, 16, 16,
    16, 16, 16, 9, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 9, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 10,
    16, 16, 16, 16, 16, 16, 16, 16,
    16, 10, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 11, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 11,
    16, 16, 16, 16, 16, 16, 16, 16,
    16, 16
};
static SROOK_CONSTEXPR_OR_CONST YCAc_type YAcCodeT{
    0x000a, 0x0000, 0x0001, 0x0004,
    0x000b, 0x001a, 0x0078, 0x00f8,
    0x03f6, 0xff82, 0xff83, 0x000c,
    0x001b, 0x0079, 0x01f6, 0x07f6,
    0xff84, 0xff85, 0xff86, 0xff87,
    0xff88, 0x001c, 0x00f9, 0x03f7,
    0x0ff4, 0xff89, 0xff8a, 0xff8b,
    0xff8c, 0xff8d, 0xff8e, 0x003a,
    0x01f7, 0x0ff5, 0xff8f, 0xff90,
    0xff91, 0xff92, 0xff93, 0xff94,
    0xff95, 0x003b, 0x03f8, 0xff96,
    0xff97, 0xff98, 0xff99, 0xff9a,
    0xff9b, 0xff9c, 0xff9d, 0x007a,
    0x07f7, 0xff9e, 0xff9f, 0xffa0,
    0xffa1, 0xffa2, 0xffa3, 0xffa4,
    0xffa5, 0x007b, 0x0ff6, 0xffa6,
    0xffa7, 0xffa8, 0xffa9, 0xffaa,
    0xffab, 0xffac, 0xffad, 0x00fa,
    0x0ff7, 0xffae, 0xffaf, 0xffb0,
    0xffb1, 0xffb2, 0xffb3, 0xffb4,
    0xffb5, 0x01f8, 0x7fc0, 0xffb6,
    0xffb7, 0xffb8, 0xffb9, 0xffba,
    0xffbb, 0xffbc, 0xffbd, 0x01f9,
    0xffbe, 0xffbf, 0xffc0, 0xffc1,
    0xffc2, 0xffc3, 0xffc4, 0xffc5,
    0xffc6, 0x01fa, 0xffc7, 0xffc8,
    0xffc9, 0xffca, 0xffcb, 0xffcc,
    0xffcd, 0xffce, 0xffcf, 0x03f9,
    0xffd0, 0xffd1, 0xffd2, 0xffd3,
    0xffd4, 0xffd5, 0xffd6, 0xffd7,
    0xffd8, 0x03fa, 0xffd9, 0xffda,
    0xffdb, 0xffdc, 0xffdd, 0xffde,
    0xffdf, 0xffe0, 0xffe1, 0x07f8,
    0xffe2, 0xffe3, 0xffe4, 0xffe5,
    0xffe6, 0xffe7, 0xffe8, 0xffe9,
    0xffea, 0xffeb, 0xffec, 0xffed,
    0xffee, 0xffef, 0xfff0, 0xfff1,
    0xfff2, 0xfff3, 0xfff4, 0x07f9,
    0xfff5, 0xfff6, 0xfff7, 0xfff8,
    0xfff9, 0xfffa, 0xfffb, 0xfffc,
    0xfffd, 0xfffe
};
static SROOK_CONSTEXPR_OR_CONST huffmanCode_Tb YAcHuffmanT{ YAcSizeT, YAcCodeT };

static SROOK_CONSTEXPR_OR_CONST int YEOBidx = 0;
static SROOK_CONSTEXPR_OR_CONST int YZRLidx = 151;

// Table K.6 - Table for chrominance AC coefficient(sheet 1 - 4)
static SROOK_CONSTEXPR_OR_CONST YCAc_type CAcSizeT{
    2, 2, 3, 4, 5, 5, 6, 7,
    9, 10, 12, 4, 6, 8, 9, 11,
    12, 16, 16, 16, 16, 5, 8, 10,
    12, 15, 16, 16, 16, 16, 16, 5,
    8, 10, 12, 16, 16, 16, 16, 16,
    16, 6, 9, 16, 16, 16, 16, 16,
    16, 16, 16, 6, 10, 16, 16, 16,
    16, 16, 16, 16, 16, 7, 11, 16,
    16, 16, 16, 16, 16, 16, 16, 7,
    11, 16, 16, 16, 16, 16, 16, 16,
    16, 8, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 9, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 9, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 9,
    16, 16, 16, 16, 16, 16, 16, 16,
    16, 9, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 11, 16, 16, 16, 16,
    16, 16, 16, 16, 16, 14, 16, 16,
    16, 16, 16, 16, 16, 16, 16, 10,
    15, 16, 16, 16, 16, 16, 16, 16,
    16, 16
};
static SROOK_CONSTEXPR_OR_CONST YCAc_type CAcCodeT{
    0x0000, 0x0001, 0x0004, 0x000a,
    0x0018, 0x0019, 0x0038, 0x0078,
    0x01f4, 0x03f6, 0x0ff4, 0x000b,
    0x0039, 0x00f6, 0x01f5, 0x07f6,
    0x0ff5, 0xff88, 0xff89, 0xff8a,
    0xff8b, 0x001a, 0x00f7, 0x03f7,
    0x0ff6, 0x7fc2, 0xff8c, 0xff8d,
    0xff8e, 0xff8f, 0xff90, 0x001b,
    0x00f8, 0x03f8, 0x0ff7, 0xff91,
    0xff92, 0xff93, 0xff94, 0xff95,
    0xff96, 0x003a, 0x01f6, 0xff97,
    0xff98, 0xff99, 0xff9a, 0xff9b,
    0xff9c, 0xff9d, 0xff9e, 0x003b,
    0x03f9, 0xff9f, 0xffa0, 0xffa1,
    0xffa2, 0xffa3, 0xffa4, 0xffa5,
    0xffa6, 0x0079, 0x07f7, 0xffa7,
    0xffa8, 0xffa9, 0xffaa, 0xffab,
    0xffac, 0xffad, 0xffae, 0x007a,
    0x07f8, 0xffaf, 0xffb0, 0xffb1,
    0xffb2, 0xffb3, 0xffb4, 0xffb5,
    0xffb6, 0x00f9, 0xffb7, 0xffb8,
    0xffb9, 0xffba, 0xffbb, 0xffbc,
    0xffbd, 0xffbe, 0xffbf, 0x01f7,
    0xffc0, 0xffc1, 0xffc2, 0xffc3,
    0xffc4, 0xffc5, 0xffc6, 0xffc7,
    0xffc8, 0x01f8, 0xffc9, 0xffca,
    0xffcb, 0xffcc, 0xffcd, 0xffce,
    0xffcf, 0xffd0, 0xffd1, 0x01f9,
    0xffd2, 0xffd3, 0xffd4, 0xffd5,
    0xffd6, 0xffd7, 0xffd8, 0xffd9,
    0xffda, 0x01fa, 0xffdb, 0xffdc,
    0xffdd, 0xffde, 0xffdf, 0xffe0,
    0xffe1, 0xffe2, 0xffe3, 0x07f9,
    0xffe4, 0xffe5, 0xffe6, 0xffe7,
    0xffe8, 0xffe9, 0xffea, 0xffeb,
    0xffec, 0x3fe0, 0xffed, 0xffee,
    0xffef, 0xfff0, 0xfff1, 0xfff2,
    0xfff3, 0xfff4, 0xfff5, 0x03fa,
    0x7fc3, 0xfff6, 0xfff7, 0xfff8,
    0xfff9, 0xfffa, 0xfffb, 0xfffc,
    0xfffd, 0xfffe
};
static SROOK_CONSTEXPR_OR_CONST huffmanCode_Tb CAcHuffmanT{ CAcSizeT, CAcCodeT };

static SROOK_CONSTEXPR_OR_CONST int CEOBidx = 0;
static SROOK_CONSTEXPR_OR_CONST int CZRLidx = 151;

// HuffmanCode

static SROOK_CONSTEXPR_OR_CONST int DcDhtLength = 0x21;
static SROOK_CONSTEXPR_OR_CONST int AcDhtLength = 0xb7;

typedef srook::array<srook::byte, 33> YDCD_t;
using namespace srook::literals::byte_literals;

static SROOK_CONSTEXPR_OR_CONST YDCD_t YDcDht{
    0xff_byte, 0xc4_byte,
    0x00_byte, 0x1f_byte,
    0x00_byte,
    0x00_byte, 0x01_byte, 0x05_byte, 0x01_byte, 0x01_byte, 0x01_byte, 0x01_byte, 0x01_byte,
    0x01_byte, 0x00_byte, 0x00_byte, 0x00_byte, 0x00_byte, 0x00_byte, 0x00_byte, 0x00_byte,
    0x00_byte, 0x01_byte, 0x02_byte, 0x03_byte, 0x04_byte, 0x05_byte, 0x06_byte, 0x07_byte,
    0x08_byte, 0x09_byte, 0x0a_byte, 0x0b_byte
};

static SROOK_CONSTEXPR_OR_CONST YDCD_t CDcDht{
    0xff_byte, 0xc4_byte,
    0x00_byte, 0x1f_byte,
    0x01_byte,
    0x00_byte, 0x03_byte, 0x01_byte, 0x01_byte, 0x01_byte, 0x01_byte, 0x01_byte, 0x01_byte,
    0x01_byte, 0x01_byte, 0x01_byte, 0x00_byte, 0x00_byte, 0x00_byte, 0x00_byte, 0x00_byte,
    0x00_byte, 0x01_byte, 0x02_byte, 0x03_byte, 0x04_byte, 0x05_byte, 0x06_byte, 0x07_byte,
    0x08_byte, 0x09_byte, 0x0a_byte, 0x0b_byte
};

typedef srook::array<srook::byte, 183> YCAc_t;
static SROOK_CONSTEXPR_OR_CONST YCAc_t YAcDht{
    0xff_byte, 0xc4_byte,
    0x00_byte, 0xb5_byte,
    0x10_byte,
    0x00_byte, 0x02_byte, 0x01_byte, 0x03_byte, 0x03_byte, 0x02_byte, 0x04_byte, 0x03_byte,
    0x05_byte, 0x05_byte, 0x04_byte, 0x04_byte, 0x00_byte, 0x00_byte, 0x01_byte, 0x7d_byte,
    0x01_byte, 0x02_byte, 0x03_byte, 0x00_byte, 0x04_byte, 0x11_byte, 0x05_byte, 0x12_byte,
    0x21_byte, 0x31_byte, 0x41_byte, 0x06_byte, 0x13_byte, 0x51_byte, 0x61_byte, 0x07_byte,
    0x22_byte, 0x71_byte, 0x14_byte, 0x32_byte, 0x81_byte, 0x91_byte, 0xa1_byte, 0x08_byte,
    0x23_byte, 0x42_byte, 0xb1_byte, 0xc1_byte, 0x15_byte, 0x52_byte, 0xd1_byte, 0xf0_byte,
    0x24_byte, 0x33_byte, 0x62_byte, 0x72_byte, 0x82_byte, 0x09_byte, 0x0a_byte, 0x16_byte,
    0x17_byte, 0x18_byte, 0x19_byte, 0x1a_byte, 0x25_byte, 0x26_byte, 0x27_byte, 0x28_byte,
    0x29_byte, 0x2a_byte, 0x34_byte, 0x35_byte, 0x36_byte, 0x37_byte, 0x38_byte, 0x39_byte,
    0x3a_byte, 0x43_byte, 0x44_byte, 0x45_byte, 0x46_byte, 0x47_byte, 0x48_byte, 0x49_byte,
    0x4a_byte, 0x53_byte, 0x54_byte, 0x55_byte, 0x56_byte, 0x57_byte, 0x58_byte, 0x59_byte,
    0x5a_byte, 0x63_byte, 0x64_byte, 0x65_byte, 0x66_byte, 0x67_byte, 0x68_byte, 0x69_byte,
    0x6a_byte, 0x73_byte, 0x74_byte, 0x75_byte, 0x76_byte, 0x77_byte, 0x78_byte, 0x79_byte,
    0x7a_byte, 0x83_byte, 0x84_byte, 0x85_byte, 0x86_byte, 0x87_byte, 0x88_byte, 0x89_byte,
    0x8a_byte, 0x92_byte, 0x93_byte, 0x94_byte, 0x95_byte, 0x96_byte, 0x97_byte, 0x98_byte,
    0x99_byte, 0x9a_byte, 0xa2_byte, 0xa3_byte, 0xa4_byte, 0xa5_byte, 0xa6_byte, 0xa7_byte,
    0xa8_byte, 0xa9_byte, 0xaa_byte, 0xb2_byte, 0xb3_byte, 0xb4_byte, 0xb5_byte, 0xb6_byte,
    0xb7_byte, 0xb8_byte, 0xb9_byte, 0xba_byte, 0xc2_byte, 0xc3_byte, 0xc4_byte, 0xc5_byte,
    0xc6_byte, 0xc7_byte, 0xc8_byte, 0xc9_byte, 0xca_byte, 0xd2_byte, 0xd3_byte, 0xd4_byte,
    0xd5_byte, 0xd6_byte, 0xd7_byte, 0xd8_byte, 0xd9_byte, 0xda_byte, 0xe1_byte, 0xe2_byte,
    0xe3_byte, 0xe4_byte, 0xe5_byte, 0xe6_byte, 0xe7_byte, 0xe8_byte, 0xe9_byte, 0xea_byte,
    0xf1_byte, 0xf2_byte, 0xf3_byte, 0xf4_byte, 0xf5_byte, 0xf6_byte, 0xf7_byte, 0xf8_byte,
    0xf9_byte, 0xfa_byte
};

static SROOK_CONSTEXPR_OR_CONST YCAc_t CAcDht{
    0xff_byte, 0xc4_byte,
    0x00_byte, 0xb5_byte,
    0x11_byte,
    0x00_byte, 0x02_byte, 0x01_byte, 0x02_byte, 0x04_byte, 0x04_byte, 0x03_byte, 0x04_byte,
    0x07_byte, 0x05_byte, 0x04_byte, 0x04_byte, 0x00_byte, 0x01_byte, 0x02_byte, 0x77_byte,
    0x00_byte, 0x01_byte, 0x02_byte, 0x03_byte, 0x11_byte, 0x04_byte, 0x05_byte, 0x21_byte,
    0x31_byte, 0x06_byte, 0x12_byte, 0x41_byte, 0x51_byte, 0x07_byte, 0x61_byte, 0x71_byte,
    0x13_byte, 0x22_byte, 0x32_byte, 0x81_byte, 0x08_byte, 0x14_byte, 0x42_byte, 0x91_byte,
    0xa1_byte, 0xb1_byte, 0xc1_byte, 0x09_byte, 0x23_byte, 0x33_byte, 0x52_byte, 0xf0_byte,
    0x15_byte, 0x62_byte, 0x72_byte, 0xd1_byte, 0x0a_byte, 0x16_byte, 0x24_byte, 0x34_byte,
    0xe1_byte, 0x25_byte, 0xf1_byte, 0x17_byte, 0x18_byte, 0x19_byte, 0x1a_byte, 0x26_byte,
    0x27_byte, 0x28_byte, 0x29_byte, 0x2a_byte, 0x35_byte, 0x36_byte, 0x37_byte, 0x38_byte,
    0x39_byte, 0x3a_byte, 0x43_byte, 0x44_byte, 0x45_byte, 0x46_byte, 0x47_byte, 0x48_byte,
    0x49_byte, 0x4a_byte, 0x53_byte, 0x54_byte, 0x55_byte, 0x56_byte, 0x57_byte, 0x58_byte,
    0x59_byte, 0x5a_byte, 0x63_byte, 0x64_byte, 0x65_byte, 0x66_byte, 0x67_byte, 0x68_byte,
    0x69_byte, 0x6a_byte, 0x73_byte, 0x74_byte, 0x75_byte, 0x76_byte, 0x77_byte, 0x78_byte,
    0x79_byte, 0x7a_byte, 0x82_byte, 0x83_byte, 0x84_byte, 0x85_byte, 0x86_byte, 0x87_byte,
    0x88_byte, 0x89_byte, 0x8a_byte, 0x92_byte, 0x93_byte, 0x94_byte, 0x95_byte, 0x96_byte,
    0x97_byte, 0x98_byte, 0x99_byte, 0x9a_byte, 0xa2_byte, 0xa3_byte, 0xa4_byte, 0xa5_byte,
    0xa6_byte, 0xa7_byte, 0xa8_byte, 0xa9_byte, 0xaa_byte, 0xb2_byte, 0xb3_byte, 0xb4_byte,
    0xb5_byte, 0xb6_byte, 0xb7_byte, 0xb8_byte, 0xb9_byte, 0xba_byte, 0xc2_byte, 0xc3_byte,
    0xc4_byte, 0xc5_byte, 0xc6_byte, 0xc7_byte, 0xc8_byte, 0xc9_byte, 0xca_byte, 0xd2_byte,
    0xd3_byte, 0xd4_byte, 0xd5_byte, 0xd6_byte, 0xd7_byte, 0xd8_byte, 0xd9_byte, 0xda_byte,
    0xe2_byte, 0xe3_byte, 0xe4_byte, 0xe5_byte, 0xe6_byte, 0xe7_byte, 0xe8_byte, 0xe9_byte,
    0xea_byte, 0xf2_byte, 0xf3_byte, 0xf4_byte, 0xf5_byte, 0xf6_byte, 0xf7_byte, 0xf8_byte,
    0xf9_byte, 0xfa_byte
};

} // namespace jpezy
#endif
